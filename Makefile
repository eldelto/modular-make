# Define the build directory and artifact name.
BUILD_DIR := ./build
ARTIFACT_NAME := main

# Define all modules to include into the binary.
MODULES := ./src \
					./src/payment-api

# Source files are added in each module.
SRC_FILES :=

# Include the Makefile of each module.
include $(patsubst %, %/module.mk,$(MODULES))

# Generate a list of object files by replacing the source file extension.
OBJ_FILES := $(SRC_FILES:.c=.o)

# Generate a list of dependency make files by replacing the object file extension.
# *.d files are generated by GCC with the -MMD & -MP command. Their main purpose is
# to track header dependencies.
DEPENDENCY_FILES := $(OBJ_FILES:.o=.d)

# Use GCC as compiler.
CC := gcc
# Set additional compiler flags.
CFLAGS  := -Wall -Werror -Wextra -pedantic-errors -ansi -std=c17 -MMD -MP

# The default target creates the finished binary at ./build/main and has all object
# files as prerequisite.
$(BUILD_DIR)/$(ARTIFACT_NAME): $(OBJ_FILES)
	$(CC) $(OBJ_FILES) -o $@ $(LDFLAGS)

# All object files depend on all source files. Also depends on the Makefile to trigger
# re-compilation on change.
%.o: %.c Makefile
	$(CC) -c $(CFLAGS) $< -o $@

# Remove all object/dependency files and the generated binary.
clean:
	find . -name '*.o' | xargs rm
	find . -name '*.d' | xargs rm
	rm $(BUILD_DIR)/$(ARTIFACT_NAME)
.PHONY: clean

# Include the generated dependency makefiles from GCC.
-include $(DEPENDENCY_FILES) 
